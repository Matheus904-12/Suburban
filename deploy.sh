#!/bin/bash

# üöÄ Script de Deploy Autom√°tico - CPTM Tracker
# Execute com: bash deploy.sh

echo "üöÜ CPTM Tracker - Deploy Autom√°tico Iniciado!"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Navegar para o diret√≥rio correto
log_info "Navegando para diret√≥rio da aplica√ß√£o..."
cd "$(dirname "$0")/App" || { log_error "Falha ao navegar para diret√≥rio App"; exit 1; }

# Verificar se o Django est√° funcionando
log_info "Verificando instala√ß√£o do Django..."
python manage.py --version || { log_error "Django n√£o encontrado. Execute: pip install -r requirements.txt"; exit 1; }

# Executar migra√ß√µes
log_info "Executando migra√ß√µes do banco de dados..."
python manage.py migrate
if [ $? -eq 0 ]; then
    log_success "Migra√ß√µes conclu√≠das com sucesso"
else
    log_error "Falha nas migra√ß√µes"
    exit 1
fi

# Criar tabela de cache se n√£o existir
log_info "Criando/atualizando tabela de cache..."
python manage.py createcachetable 2>/dev/null || log_warning "Tabela de cache j√° existe"

# Coletar arquivos est√°ticos
log_info "Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput
if [ $? -eq 0 ]; then
    log_success "Arquivos est√°ticos coletados com sucesso"
else
    log_warning "Aviso na coleta de arquivos est√°ticos"
fi

# Popular dados iniciais
log_info "Populando dados iniciais do CPTM..."
python manage.py popular_dados
if [ $? -eq 0 ]; then
    log_success "Dados do CPTM populados com sucesso"
else
    log_warning "Aviso ao popular dados (pode j√° existir)"
fi

# Navegar de volta para raiz
cd ..

# Verificar status do Git
log_info "Verificando status do reposit√≥rio Git..."
git status --porcelain
if [ $? -ne 0 ]; then
    log_error "Reposit√≥rio Git n√£o encontrado"
    exit 1
fi

# Adicionar altera√ß√µes
log_info "Adicionando altera√ß√µes ao Git..."
git add -A

# Verificar se h√° altera√ß√µes para commit
if git diff --staged --quiet; then
    log_warning "Nenhuma altera√ß√£o encontrada para commit"
else
    # Fazer commit
    COMMIT_MSG="üöÄ Deploy $(date +'%Y-%m-%d %H:%M:%S') - Atualiza√ß√µes autom√°ticas"
    log_info "Fazendo commit das altera√ß√µes..."
    git commit -m "$COMMIT_MSG"
    
    # Push para GitHub
    log_info "Enviando altera√ß√µes para GitHub..."
    git push origin main
    if [ $? -eq 0 ]; then
        log_success "Altera√ß√µes enviadas para GitHub com sucesso"
    else
        log_error "Falha ao enviar para GitHub"
        exit 1
    fi
fi

echo ""
echo "üéâ Deploy conclu√≠do com sucesso!"
echo "=============================================="
echo "üìã Pr√≥ximos passos para deploy em produ√ß√£o:"
echo ""
echo "üî∏ RENDER (Recomendado - Gratuito):"
echo "   1. Acesse: https://render.com"
echo "   2. Conecte seu reposit√≥rio GitHub"
echo "   3. Selecione 'Web Service'"
echo "   4. Configure automaticamente com render.yaml"
echo "   5. Deploy autom√°tico!"
echo ""
echo "üî∏ RAILWAY (Alternativa - 500h gratuitas):"
echo "   1. Acesse: https://railway.app"
echo "   2. 'Deploy from GitHub repo'"
echo "   3. Selecione o reposit√≥rio"
echo "   4. Deploy autom√°tico!"
echo ""
echo "üî∏ URLs de exemplo ap√≥s deploy:"
echo "   - https://cptm-tracker-live.onrender.com"
echo "   - https://seu-projeto.railway.app"
echo ""
echo "üì± Funcionalidades ativas:"
echo "   ‚úÖ Mapa interativo com OpenStreetMap"
echo "   ‚úÖ Simula√ß√£o de trens em tempo real"
echo "   ‚úÖ Sistema de temperatura atualizado"
echo "   ‚úÖ Coordenadas oficiais CPTM"
echo "   ‚úÖ Interface responsiva"
echo "   ‚úÖ Performance otimizada"
echo ""
echo "üöÜ CPTM Tracker est√° pronto para produ√ß√£o!"